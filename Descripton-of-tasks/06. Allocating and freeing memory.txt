Purpose
Up until now we have always known how much data we are working with, that is to say, the count is known when you write your code. This week you will allocate memory dynamically based on input from the user.
I recommend starting with 6.1 as it’s simpler than 6.2. Both are mandatory.
Grading critera for hand-in 5 and 6
	1. Code functionality (Bamboo tests)
	2. Code structure (use of structures, functions, files)
	3. Readability (formatting, naming, "spaghetti")
	6.1
Folder name: hand-in_6_1


Specification:
Write an application that:
1. Asks the user how many integers the user will type in
2. Allocates memory for the integers
3. Reads in all the integers
4. Prints the integers back out
5. Optional: Prints all the integers sorted


Requirements:
malloc() and free() must be used. You are not allowed to use a pre-allocated array for the values.


Expected output with no numbers:
No numbers were given


Expected output otherwise:
Count: 5
Numbers: 4 2 1 3 5
Sorted: 1 2 3 4 5


6.2
Folder name: hand-in_6_2


Specification:
Write an application that asks for student information (name and age) until the name given is stop, then:
1. Prints out how many students that are stored
2. Prints out all the collected student information
3. Prints out the name of the youngest student
4. prints out the name of the oldest student


Requirements:
The student info must be stored in a struct.
malloc(), realloc() and free() must be used. You are not allowed to use a pre-allocated array for the student list. Grow your array by 5 elements when more space is needed.


Expected output with no students:
No students were given


Expected output otherwise:
Count: 3
name = Arne Banan, Age = 23
Name = Lisa Potet, Age = 22
Name = Knut Appelsin, Age = 24
Youngest: Lisa Potet
Oldest: Knut Appelsin